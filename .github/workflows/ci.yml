name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run Ruff linter
        run: |
          uv run ruff check --output-format=github .

      - name: Run Ruff formatter check
        run: |
          uv run ruff format --check .

      - name: Run MyPy type checking
        run: |
          uv run mypy src/ || true  # Allow mypy to fail for now

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Windows has issues with some terminal-related dependencies
          - os: windows-latest
            python-version: "3.8"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y git

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # Git should already be available on macOS runners
          git --version

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # Git should already be available on Windows runners
          git --version

      - name: Run tests
        run: |
          uv run pytest tests/ -v --tb=short --color=yes

      - name: Run tests with coverage
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        run: |
          uv run pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Install tigs
        run: |
          uv pip install -e .

      - name: Test CLI installation
        run: |
          uv run tigs --help

      - name: Create test git repository
        run: |
          git config --global user.name "CI Test"
          git config --global user.email "test@example.com"
          mkdir test-repo
          cd test-repo
          git init
          echo "# Test Repo" > README.md
          git add README.md
          git commit -m "Initial commit"

      - name: Test basic tigs functionality
        run: |
          cd test-repo
          # Test that tigs commands don't crash
          uv run tigs --help
          # Add more integration tests as the project grows

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build package
        run: |
          uv build

      - name: Check package
        run: |
          uv run python -m pip install twine
          uv run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 7